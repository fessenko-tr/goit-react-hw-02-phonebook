{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","submitNewContact","preventDefault","props","addNewContact","clearForm","onSubmit","this","type","pattern","title","required","onChange","Component","Contact","id","deleteFunction","onClick","ContactList","contactsList","deleteContactBtn","contacts","map","Filter","updateFilterFunc","App","filter","current","find","el","shortid","generate","alert","deleteContact","updateFilter","getFilteredContacs","toLowerCase","includes","contactsToShow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4937e256.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  static propTypes = {\r\n    addNewContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState(() => ({ [name]: value }));\r\n  };\r\n\r\n  submitNewContact = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.addNewContact(name, number);\r\n    this.clearForm();\r\n  };\r\n\r\n  clearForm = () => {\r\n    this.setState(() => ({ name: \"\", number: \"\" }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitNewContact}>\r\n        <label>\r\n          NAME\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          PHONE\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Contact({ id, name, number, deleteFunction }) {\r\n  return (\r\n    <li>\r\n      <p>{`${name}: ${number}`}</p>\r\n      <button\r\n        onClick={() => {\r\n          deleteFunction(id);\r\n        }}\r\n      >\r\n        DELETE\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nContact.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteFunction: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import Contact from \"../Contact\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ContactList({ contactsList, deleteContactBtn }) {\r\n  const contacts = contactsList.map(({ id, name, number }) => (\r\n    <Contact\r\n      key={id}\r\n      id={id}\r\n      name={name}\r\n      number={number}\r\n      deleteFunction={deleteContactBtn}\r\n    />\r\n  ));\r\n\r\n  return <ul>{contacts}</ul>;\r\n}\r\n\r\nContactList.propTypes = {\r\n  contactsList: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  deleteContactBtn: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ value, updateFilterFunc }) {\r\n  return (\r\n    <label>\r\n      Find contact by name\r\n      <input value={value} onChange={updateFilterFunc} />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  updateFilterFunc: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\nimport shortid from \"shortid\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  addNewContact = (name, number) => {\n    const { contacts } = this.state;\n\n    this.setState((current) => {\n      if (contacts.find((el) => el.name === name)) {\n        alert(`${name} is already in contacts.`);\n        return;\n      }\n      return {\n        contacts: [\n          ...current.contacts,\n          { id: shortid.generate(), name, number },\n        ],\n      };\n    });\n  };\n\n  deleteContact = (id) => {\n    const { contacts } = this.state;\n\n    this.setState({ contacts: contacts.filter((el) => el.id !== id) });\n  };\n\n  updateFilter = (e) => {\n    const value = e.currentTarget.value;\n    this.setState(() => ({ filter: value }));\n  };\n\n  getFilteredContacs = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter((e) => {\n      return e.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  };\n\n  render() {\n    const contactsToShow = this.getFilteredContacs();\n    const { filter } = this.state;\n\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm addNewContact={this.addNewContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} updateFilterFunc={this.updateFilter} />\n        <ContactList\n          contactsList={contactsToShow}\n          deleteContactBtn={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}